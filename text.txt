storage-finder/
│
├── database.js
├── server.js
├── public/
│   ├── admin.html
│   └── index.html
└── storage.db

server.js:
const express = require('express');
const { 
    User, 
    Item, 
    FoundItem, 
    initializeDatabase 
} = require('./database');
const path = require('path');

const app = express();
const PORT = 3000;

// Middleware
app.use(express.json());
app.use(express.static('public'));

// Initialize Database
initializeDatabase();

// Routes
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'admin.html'));
});

app.get('/api/found-items', async (req, res) => {
    try {
        const items = await Item.findAll({
            include: [
                { 
                    model: FoundItem,
                    include: [User]
                }
            ]
        });
        res.json(items);
    } catch (error) {
        console.error('Error fetching items:', error);
        res.status(500).json({ error: error.message });
    }
});

app.post('/api/add-item', async (req, res) => {
    const { itemName, description, category, location, foundDate, imageUrl } = req.body;
    
    try {
        // Find admin user
        const admin = await User.findOne({ 
            where: { email: 'admin@example.com' } 
        });

        if (!admin) {
            return res.status(404).json({ error: 'Admin user not found' });
        }

        // Create Item
        const item = await Item.create({
            item_name: itemName,
            description,
            category,
            found_date: foundDate,
            image_url: imageUrl,
            status: 'unclaimed'
        });

        // Create Found Item
        await FoundItem.create({
            found_date: foundDate,
            location,
            item_id: item.item_id,
            found_by_user_id: admin.user_id
        });

        res.status(201).json({ 
            message: 'Item added successfully', 
            item 
        });
    } catch (error) {
        console.error('Error adding item:', error);
        res.status(500).json({ error: error.message });
    }
});

// Start server
app.listen(PORT, () => {
    console.log(`Server running on http://localhost:${PORT}`);
});

database.js:
const { Sequelize, DataTypes } = require('sequelize');

// PostgreSQL Connection
const sequelize = new Sequelize('lost_and_found', 'postgres', 'Jatin1101', {
    host: 'localhost',
    dialect: 'postgres',
    logging: false,
    port: 5432  // Default PostgreSQL port
});

// User Model
const User = sequelize.define('User', {
    user_id: {
        type: DataTypes.INTEGER,
        primaryKey: true,
        autoIncrement: true
    },
    name: {
        type: DataTypes.STRING,
        allowNull: false
    },
    email: {
        type: DataTypes.STRING,
        unique: true,
        allowNull: false
    },
    phone: DataTypes.STRING,
    role: {
        type: DataTypes.ENUM('student', 'admin'),
        allowNull: false
    }
}, {
    tableName: 'users',  // Explicit table name
    timestamps: false    // Disable Sequelize's timestamp columns
});

// Item Model
const Item = sequelize.define('Item', {
    item_id: {
        type: DataTypes.INTEGER,
        primaryKey: true,
        autoIncrement: true
    },
    item_name: {
        type: DataTypes.STRING,
        allowNull: false
    },
    description: DataTypes.TEXT,
    category: DataTypes.STRING,
    found_date: DataTypes.DATE,
    status: {
        type: DataTypes.ENUM('unclaimed', 'claimed', 'processed'),
        defaultValue: 'unclaimed'
    },
    image_url: DataTypes.STRING
}, {
    tableName: 'items',
    timestamps: false
});

// FoundItem Model
const FoundItem = sequelize.define('FoundItem', {
    record_id: {
        type: DataTypes.INTEGER,
        primaryKey: true,
        autoIncrement: true
    },
    found_date: {
        type: DataTypes.DATE,
        allowNull: false
    },
    location: DataTypes.STRING
}, {
    tableName: 'found_items',
    timestamps: false
});

// Associations
User.hasMany(FoundItem, { foreignKey: 'found_by_user_id' });
Item.hasOne(FoundItem, { foreignKey: 'item_id' });
FoundItem.belongsTo(User, { foreignKey: 'found_by_user_id' });
FoundItem.belongsTo(Item, { foreignKey: 'item_id' });

// Initialize Database
async function initializeDatabase() {
    try {
        await sequelize.authenticate();
        console.log('PostgreSQL connection established.');
        
        // Sync models (create tables if not exist)
        await sequelize.sync({ alter: true });
        
        // Check if admin exists
        const [admin, created] = await User.findOrCreate({
            where: { email: 'admin@example.com' },
            defaults: {
                name: 'Admin',
                email: 'admin@example.com',
                role: 'admin'
            }
        });

        if (created) {
            console.log('Admin user created');
        }
    } catch (error) {
        console.error('Unable to connect to the database:', error);
    }
}

// Export models and initialization
module.exports = {
    sequelize,
    User,
    Item,
    FoundItem,
    initializeDatabase
};

admin.html:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Found Items Admin</title>
    <style>
        body { font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; }
        form { display: flex; flex-direction: column; gap: 10px; }
        input, select, textarea { margin-bottom: 10px; padding: 5px; }
        button { padding: 10px; background-color: #4CAF50; color: white; border: none; cursor: pointer; }
    </style>
</head>
<body>
    <h1>Add Found Item</h1>
    <form id="foundItemForm">
        <label>Item Name:</label>
        <input type="text" id="itemName" required>

        <label>Description:</label>
        <textarea id="description"></textarea>

        <label>Category:</label>
        <select id="category">
            <option value="">Select Category</option>
            <option value="Electronics">Electronics</option>
            <option value="Clothing">Clothing</option>
            <option value="Books">Books</option>
            <option value="Other">Other</option>
        </select>

        <label>Found Location:</label>
        <input type="text" id="location" required>

        <label>Found Date:</label>
        <input type="date" id="foundDate" required>

        <label>Image URL:</label>
        <input type="url" id="imageUrl">

        <button type="submit">Submit Found Item</button>
    </form>

    <script>
        document.getElementById('foundItemForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const itemName = document.getElementById('itemName').value;
            const description = document.getElementById('description').value;
            const category = document.getElementById('category').value;
            const location = document.getElementById('location').value;
            const foundDate = document.getElementById('foundDate').value;
            const imageUrl = document.getElementById('imageUrl').value;
    
            try {
                const response = await fetch('/api/add-item', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        itemName,
                        description,
                        category,
                        location,
                        foundDate,
                        imageUrl,
                    }),
                });
    
                const data = await response.json();
    
                if (response.ok) {
                    alert('Item successfully added!');
                    e.target.reset(); // Reset the form
                } else {
                    throw new Error(data.error || 'Failed to add item');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Failed to add item');
            }
        });
    </script>
</body>
</html>

student.html:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Found Items</title>
    <style>
        body { font-family: Arial, sans-serif; max-width: 1200px; margin: 0 auto; padding: 20px; }
        .card-container { display: flex; flex-wrap: wrap; gap: 20px; }
        .card {
            border: 1px solid #ddd;
            border-radius: 8px;
            width: 250px;
            padding: 15px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }
        .card img { max-width: 100%; height: 200px; object-fit: cover; }
        .card-details { margin-top: 10px; }
    </style>
</head>
<body>
    <h1>Found Items</h1>
    <div id="cardContainer" class="card-container"></div>

    <script type="module">
        import Database from 'better-sqlite3';

        const db = new Database('storage.db');

        function fetchFoundItems() {
            const query = `
                SELECT 
                    items.item_id, 
                    items.item_name, 
                    items.description, 
                    items.category, 
                    items.found_date, 
                    items.image_url,
                    found_items.location,
                    user.name as found_by
                FROM items
                JOIN found_items ON items.item_id = found_items.item_id
                JOIN user ON found_items.found_by_user_id = user.user_id
            `;
            return db.prepare(query).all();
        }

        function renderCards() {
            const cardContainer = document.getElementById('cardContainer');
            const items = fetchFoundItems();

            items.forEach(item => {
                const card = document.createElement('div');
                card.classList.add('card');
                card.innerHTML = `
                    <img src="${item.image_url || 'placeholder.jpg'}" alt="${item.item_name}">
                    <div class="card-details">
                        <h3>${item.item_name}</h3>
                        <p><strong>Category:</strong> ${item.category}</p>
                        <p><strong>Description:</strong> ${item.description}</p>
                        <p><strong>Found Date:</strong> ${item.found_date}</p>
                        <p><strong>Location:</strong> ${item.location}</p>
                        <p><strong>Found By:</strong> ${item.found_by}</p>
                    </div>
                `;
                cardContainer.appendChild(card);
            });
        }

        renderCards();
    </script>
</body>
</html>
